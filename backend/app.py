from flask import Flask, jsonify
from flask import request, jsonify
from flask_cors import CORS
import pandas as pd
from binance.client import Client
from datetime import datetime, timedelta, timezone
import time
import requests
import zipfile
import io
import csv
import logging
from db import (
    create_table,
    salve_or_replace,
    symbolo_saved,
    symbolo_saved_sec,
    salve_or_replace_sec,
    symbolo_saved_sec,
    create_table_sec,
    create_table_timeframe_global,
    get_timeframe_global,
    save_trend_clarifications,
    create_table_trend_clarifications,
    clear_table_trend_clarifications,
    save_trend_clarifications_key,
    clear_table_trend_clarifications_key,
    create_table_trend_clarifications_key,
    important_points,
    important_points_key,
    init_db,
    save_klines,
    conectar,
    Delete_all_Klines,
    get_data_klines,
    get_trend_clarifications,
    Delete_all_Klines_sec,
    save_klines_sec,
    create_table_trend_clarifications_sec,
    get_trend_clarifications_sec,
    get_data_klines_sec,
    init_db_sec,
    clear_table_trend_clarifications_sec,
    save_trend_clarifications_sec,
    get_trend_clarifications_key,
    get_date_simulation,
    get_date_simulation_sec,
)
from indicators.rsi import get_rsi_from_db
from indicators.atr import calcular_atr_movel, suavizar_atr

client = Client()
app = Flask(__name__)
CORS(app)


# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

if __name__ == "__main__":
    app.run(debug=True)

create_table()
create_table_sec()
create_table_trend_clarifications()
clear_table_trend_clarifications()
create_table_trend_clarifications_sec()
create_table_trend_clarifications_key()
clear_table_trend_clarifications_key()
init_db()
init_db_sec()


# --------------------------------------------------------
# Fun√ß√£o para formatar os dados brutos da API da Binance
# --------------------------------------------------------
def formatar_dados_brutos(dados_brutos):
    dados_formatados = []

    for k in dados_brutos:
        dado = {
            "Tempo": datetime.fromtimestamp(k[0] / 1000).strftime("%Y-%m-%d %H:%M:%S"),
            "Abertura": float(k[1]),
            "Maximo": float(k[2]),
            "Minimo": float(k[3]),
            "Fechamento": float(k[4]),
            "Volume": float(k[5]),
        }
        dados_formatados.append(dado)

    return dados_formatados


# --------------------------------
# Fun√ß√£o para calcular RSI INICIO
# --------------------------------
@app.route("/api/rsi", methods=["GET"])
def api_rsi():
    period = int(request.args.get("period", 14))
    media_period = int(request.args.get("media_period", 6))
    modo = request.args.get("modo", "simulation").strip().lower()
    symbol = request.args.get("symbol", "").strip().upper()

    data = get_rsi_from_db(symbol, modo, period, media_period)
    if data:
        return jsonify(data), 200
    else:
        return jsonify({"message": "Nenhum dado salvo no banco"}), 404


# --------------------------------
# Fun√ß√£o para calcular RSI FIM
# --------------------------------


# ==========================================================================
#                      Inicio ativo prim√°rio
# ==========================================================================
# ----------------------------------------
# üîç 1Ô∏è‚É£ Consultar o √∫ltimo s√≠mbolo salvo
# ----------------------------------------
@app.route("/api/last_symbol", methods=["GET"])
def get_last_symbol():
    symbol = symbolo_saved()
    if symbol:
        return jsonify({"symbol": symbol}), 200
    else:
        return jsonify({"message": "Nenhum s√≠mbolo salvo"}), 404


# --------------------------------------------------------
# 1Ô∏è‚É£ Endpoint para mudar tempo grafico (em todos graficos)
# --------------------------------------------------------
@app.route("/api/timeframe", methods=["GET", "POST"])
def filter_time():
    if request.method == "POST":
        data = request.get_json() or request.form
        time = data.get("time", "").strip()

        if not time:
            return jsonify({"erro": "Par√¢metro 'symbol' √© obrigat√≥rio"}), 400

        create_table_timeframe_global(time)
        return jsonify({"mensagem": "Timeframe salvo com sucesso", "time": time}), 200

    elif request.method == "GET":
        # Retorna o tempo atual salvo
        time = get_timeframe_global()
        return jsonify({"time": time}), 200


# ----------------------------------------------------------------------
# 1Ô∏è‚É£ Fun√ß√£o para atualizar o klines salvos para simular primeiro ativo
# ----------------------------------------------------------------------
@app.route("/api/update_klines", methods=["GET", "POST"])
def update_klines():
    symbol = str(request.args.get("symbol", "")).strip().upper()
    date_start = request.args.get("date_start", "").strip()
    date_end = request.args.get("date_end", "").strip()
    days = request.args.get("days", "").strip()

    if not symbol:
        return jsonify({"erro": "Par√¢metro 'symbol' √© obrigat√≥rio"}), 400

    days = int(days) if days.isdigit() else None

    salve_or_replace(symbol)
    timeFrame = get_timeframe_global().lower()

    try:
        download_and_save_klines(
            symbol,
            intervalo=timeFrame,
            date_start=date_start,
            date_end=date_end,
            days=days,
        )
        return jsonify({"mensagem": f"Dados de {symbol} atualizados com sucesso!"})
    except Exception as e:
        print(f"‚ùå Erro ao baixar/salvar klines: {str(e)}")
        return jsonify({"erro": str(e)}), 500


# --------------------------------------------------
# üìä 1Ô∏è‚É£  Baixar m√∫ltiplos anos do ativo primario
# --------------------------------------------------
def download_historical_klines(
    symbol, intervalo, start_year, end_year, date_start=None, date_end=None
):
    all_klines = []
    base_url = "https://data.binance.vision/data/spot/monthly/klines"

    for year in range(start_year, end_year + 1):
        for month in range(1, 13):
            file_name = f"{symbol}-{intervalo}-{year}-{month:02d}.zip"
            url = f"{base_url}/{symbol}/{intervalo}/{file_name}"

            try:
                response = requests.get(url)
                if response.status_code == 200:
                    with zipfile.ZipFile(io.BytesIO(response.content)) as z:
                        csv_name = file_name.replace(".zip", ".csv")
                        with z.open(csv_name) as f:
                            reader = csv.reader(io.TextIOWrapper(f))
                            next(reader, None)  # Pula cabe√ßalho, se houver
                            klines = [row for row in reader if row]
                            all_klines.extend(klines)
                else:
                    print(f"Arquivo n√£o encontrado: {url}")
            except Exception as e:
                print(f"Erro ao baixar {url}: {e}")
                continue

    # Filtrar por datas, se fornecidas
    if date_start and date_end:
        start_ms = int(
            datetime.strptime(date_start, "%Y-%m-%d")
            .replace(tzinfo=timezone.utc)
            .timestamp()
            * 1000
        )
        end_ms = int(
            datetime.strptime(date_end, "%Y-%m-%d")
            .replace(tzinfo=timezone.utc)
            .timestamp()
            * 1000
        )
        all_klines = [k for k in all_klines if start_ms <= int(k[0]) <= end_ms]

    # Formatar para o mesmo formato da API (11 colunas)
    klines_formatados = [tuple(k[:11]) for k in all_klines if k]
    return klines_formatados


# --------------------------------------------------
# üìä 1Ô∏è‚É£  Guarda no banco de dados do ativo primario
# --------------------------------------------------
def download_and_save_klines(
    symbol, intervalo, date_start=None, date_end=None, days=None, clean_before=True
):
    if clean_before:
        Delete_all_Klines()

    all_klines = []

    # Definir per√≠odo
    if date_start and date_end:
        start_dt = datetime.strptime(date_start, "%Y-%m-%d")
        end_dt = datetime.strptime(date_end, "%Y-%m-%d")
        start_ms = int(start_dt.replace(tzinfo=timezone.utc).timestamp() * 1000)
        end_ms = int(end_dt.replace(tzinfo=timezone.utc).timestamp() * 1000)

        # Se per√≠odo for longo (> 1 ano), usar dados hist√≥ricos
        if (end_dt - start_dt).days > 365:
            start_year = start_dt.year
            end_year = end_dt.year
            all_klines = download_historical_klines(
                symbol, intervalo, start_year, end_year, date_start, date_end
            )
            # Complementar com API para dados ap√≥s o √∫ltimo arquivo mensal
            last_kline_ms = int(all_klines[-1][0]) if all_klines else start_ms
            if last_kline_ms < end_ms:
                while last_kline_ms < end_ms:
                    params = {
                        "symbol": symbol,
                        "interval": intervalo,
                        "startTime": last_kline_ms + 1,
                        "limit": 1000,  # Limite padr√£o da API √© 1000, n√£o 1500
                    }
                    if end_ms:
                        params["endTime"] = end_ms

                    batch = client.get_klines(**params)
                    if not batch:
                        break
                    all_klines.extend(batch)
                    last_kline_ms = batch[-1][0]
                    time.sleep(0.3)  # Evitar rate limit
        else:
            # Per√≠odo curto, usar apenas API
            while True:
                params = {
                    "symbol": symbol,
                    "interval": intervalo,
                    "startTime": start_ms,
                    "limit": 1000,
                }
                if end_ms:
                    params["endTime"] = end_ms

                batch = client.get_klines(**params)
                if not batch:
                    break
                all_klines.extend(batch)
                if end_ms and batch[-1][0] >= end_ms:
                    break
                start_ms = batch[-1][0] + 1
                time.sleep(0.3)
    elif days:
        # L√≥gica para days (usar API)
        start_ms = int(
            (datetime.now(timezone.utc) - timedelta(days=int(days))).timestamp() * 1000
        )
        end_ms = None
        while True:
            params = {
                "symbol": symbol,
                "interval": intervalo,
                "startTime": start_ms,
                "limit": 1000,
            }
            batch = client.get_klines(**params)
            if not batch:
                break
            all_klines.extend(batch)
            start_ms = batch[-1][0] + 1
            time.sleep(0.3)
    else:
        raise ValueError("Voc√™ deve passar dias ou date_start/date_end")

    # Formatar e salvar
    klines_formatados = [tuple(k[:11]) for k in all_klines]
    conn = conectar()
    save_klines(
        conn,
        symbol,
        intervalo,
        klines_formatados,
        days=days,
        days_start=date_start,
        days_end=date_end,
    )
    conn.close()


# ============================SIMULAR inicio============================
# ----------------------------------------------------------------
# üìä 1Ô∏è‚É£ Pega no banco de dados do ativo para simula√ß√£o prim√°rio.
# ----------------------------------------------------------------
@app.route("/api/simulate_price_atr", methods=["GET"])
def simulate_price_atr():
    offset = int(request.args.get("offset", 0))
    limit = int(request.args.get("limit", 10))

    movimentos = get_trend_clarifications()

    if not movimentos:
        return jsonify([])  # Nada para simular

    movimentos_fatiados = movimentos[offset : offset + limit]

    dados = [
        {
            "closeTime": m[0],
            "closePrice": m[1],
            "tipo": m[2],
        }
        for m in movimentos_fatiados
    ]
    return jsonify(dados)


# -------------------------------------------
# üìä 1Ô∏è‚É£  Pega as datas ou dias da simula√ß√£o.
# -------------------------------------------


@app.route("/api/get_date/simulation", methods=["GET"])
def get_date_simalation():
    date_simulation = get_date_simulation()
    if date_simulation:
        days, days_start, days_end = date_simulation
        return (
            jsonify({"days": days, "days_start": days_start, "days_end": days_end}),
            200,
        )
    else:
        return jsonify({"message": "Nenhum s√≠mbolo salvo"}), 404


# ===============================SIMULAR FIM================================
# ==========================================================================
#                          Fim ativo prim√°rio
# ==========================================================================


# ==========================================================================
#                          Inicio ativo secund√°rio
# ==========================================================================
# ------------------------------------------------------------
# üîç 2Ô∏è‚É£ Consultar o √∫ltimo s√≠mbolo salvo do ativo secund√°rio
# ------------------------------------------------------------
@app.route("/api/last_symbol_second", methods=["GET"])
def get_last_symbol_sec():
    symbol = symbolo_saved_sec()
    if symbol:
        return jsonify({"symbol": symbol}), 200
    else:
        return jsonify({"message": "Nenhum s√≠mbolo salvo"}), 404


# --------------------------------------------------------------------
# 2Ô∏è‚É£ Fun√ß√£o para atualizar os klines salvos para simular segundo ativo.
# --------------------------------------------------------------------
@app.route("/api/update_klines_sec", methods=["GET", "POST"])
def update_klines_sec():
    symbol = request.args.get("symbol", "").strip().upper()
    date_start = request.args.get("date_start", "").strip()
    date_end = request.args.get("date_end", "").strip()
    days = request.args.get("days", "").strip()

    if not symbol:
        return jsonify({"erro": "Par√¢metro 'symbol' √© obrigat√≥rio"}), 400

    days = int(days) if days.isdigit() else None

    salve_or_replace_sec(symbol)  # salva no banco o s√≠mbolo atual
    timeFrame = get_timeframe_global().lower()

    try:
        download_and_save_klines_sec(
            symbol,
            intervalo=timeFrame,
            date_start=date_start,
            date_end=date_end,
            days=days,
        )
        return jsonify({"mensagem": f"Dados de {symbol} atualizados com sucesso!"})
    except Exception as e:
        print(f"‚ùå Erro ao baixar/salvar klines: {str(e)}")
        return jsonify({"erro": str(e)}), 500


# --------------------------------------------------
# üìä 2Ô∏è‚É£   Baixar m√∫ltiplos anos do ativo Secundario
# --------------------------------------------------
def download_historical_klines_sec(
    symbol, intervalo, start_year, end_year, date_start=None, date_end=None
):
    all_klines = []
    base_url = "https://data.binance.vision/data/spot/monthly/klines"

    for year in range(start_year, end_year + 1):
        for month in range(1, 13):
            file_name = f"{symbol}-{intervalo}-{year}-{month:02d}.zip"
            url = f"{base_url}/{symbol}/{intervalo}/{file_name}"

            try:
                response = requests.get(url)
                if response.status_code == 200:
                    with zipfile.ZipFile(io.BytesIO(response.content)) as z:
                        csv_name = file_name.replace(".zip", ".csv")
                        with z.open(csv_name) as f:
                            reader = csv.reader(io.TextIOWrapper(f))
                            next(reader, None)  # Pula cabe√ßalho, se houver
                            klines = [row for row in reader if row]
                            all_klines.extend(klines)
                else:
                    print(f"Arquivo n√£o encontrado: {url}")
            except Exception as e:
                print(f"Erro ao baixar {url}: {e}")
                continue

    # Filtrar por datas, se fornecidas
    if date_start and date_end:
        start_ms = int(
            datetime.strptime(date_start, "%Y-%m-%d")
            .replace(tzinfo=timezone.utc)
            .timestamp()
            * 1000
        )
        end_ms = int(
            datetime.strptime(date_end, "%Y-%m-%d")
            .replace(tzinfo=timezone.utc)
            .timestamp()
            * 1000
        )
        all_klines = [k for k in all_klines if start_ms <= int(k[0]) <= end_ms]

    # Formatar para o mesmo formato da API (11 colunas)
    klines_formatados = [tuple(k[:11]) for k in all_klines if k]
    return klines_formatados


# ----------------------------------------------------------
# üìä2Ô∏è‚É£  Guarda no banco de dados dados do ativo secund√°rio
# -----------------------------------------------------------
def download_and_save_klines_sec(
    symbol, intervalo, date_start=None, date_end=None, days=None, clean_before=True
):
    if clean_before:
        Delete_all_Klines_sec()

    all_klines = []

    # Definir per√≠odo
    if date_start and date_end:
        start_dt = datetime.strptime(date_start, "%Y-%m-%d")
        end_dt = datetime.strptime(date_end, "%Y-%m-%d")
        start_ms = int(start_dt.replace(tzinfo=timezone.utc).timestamp() * 1000)
        end_ms = int(end_dt.replace(tzinfo=timezone.utc).timestamp() * 1000)

        # Se per√≠odo for longo (> 1 ano), usar dados hist√≥ricos
        if (end_dt - start_dt).days > 365:
            start_year = start_dt.year
            end_year = end_dt.year
            all_klines = download_historical_klines_sec(
                symbol, intervalo, start_year, end_year, date_start, date_end
            )
            # Complementar com API para dados ap√≥s o √∫ltimo arquivo mensal
            last_kline_ms = int(all_klines[-1][0]) if all_klines else start_ms
            if last_kline_ms < end_ms:
                while last_kline_ms < end_ms:
                    params = {
                        "symbol": symbol,
                        "interval": intervalo,
                        "startTime": last_kline_ms + 1,
                        "limit": 1000,  # Limite padr√£o da API √© 1000, n√£o 1500
                    }
                    if end_ms:
                        params["endTime"] = end_ms

                    batch = client.get_klines(**params)
                    if not batch:
                        break
                    all_klines.extend(batch)
                    last_kline_ms = batch[-1][0]
                    time.sleep(0.3)  # Evitar rate limit
        else:
            # Per√≠odo curto, usar apenas API
            while True:
                params = {
                    "symbol": symbol,
                    "interval": intervalo,
                    "startTime": start_ms,
                    "limit": 1000,
                }
                if end_ms:
                    params["endTime"] = end_ms

                batch = client.get_klines(**params)
                if not batch:
                    break
                all_klines.extend(batch)
                if end_ms and batch[-1][0] >= end_ms:
                    break
                start_ms = batch[-1][0] + 1
                time.sleep(0.3)
    elif days:
        # L√≥gica para days (usar API)
        start_ms = int(
            (datetime.now(timezone.utc) - timedelta(days=int(days))).timestamp() * 1000
        )
        end_ms = None
        while True:
            params = {
                "symbol": symbol,
                "interval": intervalo,
                "startTime": start_ms,
                "limit": 1000,
            }
            batch = client.get_klines(**params)
            if not batch:
                break
            all_klines.extend(batch)
            start_ms = batch[-1][0] + 1
            time.sleep(0.3)
    else:
        raise ValueError("Voc√™ deve passar dias ou date_start/date_end")

    # Formatar e salvar
    klines_formatados = [tuple(k[:11]) for k in all_klines]
    conn = conectar()
    save_klines_sec(
        conn,
        symbol,
        intervalo,
        klines_formatados,
        days=days,
        days_start=date_start,
        days_end=date_end,
    )
    conn.close()


# ===============================SIMULAR inicio================================
# -----------------------------------------------------------------------------
# üìä 2Ô∏è‚É£ pega no banco de dados dados do ativo para simular o ativo secund√°rio
# -----------------------------------------------------------------------------
@app.route("/api/simulate_price_atr_sec", methods=["GET"])
def simulate_price_atr_sec():
    offset = int(request.args.get("offset", 0))
    limit = int(request.args.get("limit", 10))

    movimentos = get_trend_clarifications_sec()

    if not movimentos:
        return jsonify([])  # Nada para simular

    movimentos_fatiados = movimentos[offset : offset + limit]

    dados = [
        {
            "closeTime": m[0],
            "closePrice": m[1],
            "tipo": m[2],
        }
        for m in movimentos_fatiados
    ]

    return jsonify(dados)


# -------------------------------------------
# üìä 2Ô∏è‚É£  Pega as datas ou dias da simula√ß√£o.
# -------------------------------------------
@app.route("/api/get_date/simulation_sec", methods=["GET"])
def get_date_simalation_sec():
    date_simulation = get_date_simulation_sec()
    if date_simulation:
        days, days_start, days_end = date_simulation
        return (
            jsonify({"days": days, "days_start": days_start, "days_end": days_end}),
            200,
        )
    else:
        return jsonify({"message": "Nenhum s√≠mbolo salvo"}), 404


# ===============================SIMULAR FIM================================


# ==========================================================================
#                          Fim ativo secund√°rio
# ==========================================================================


# ==========================================================================
#                          Inicio ativo Chave
# ==========================================================================
# --------------------------------------------------------------------
# üìä 3 pega no banco de dados dados do ativo para simular ativo chave
# --------------------------------------------------------------------
@app.route("/api/simulate_price_atr_key", methods=["GET"])
def simulate_price_atr_key():
    offset = int(request.args.get("offset", 0))
    limit = int(request.args.get("limit", 10))

    movimentos = get_trend_clarifications_key()

    if not movimentos:
        return jsonify([])  # Nada para simular

    movimentos_fatiados = movimentos[offset : offset + limit]

    dados = [
        {
            "closeTime": m[0],
            "closePrice": m[1],
            "tipo": m[2],
        }
        for m in movimentos_fatiados
    ]

    return jsonify(dados)


# ==========================================================================
#                          Inicie a classifica√ß√£o
# ==========================================================================
# ------------------------------
# 1Ô∏è‚É£ Endpoint do ativo Primeiro
# ------------------------------
@app.route("/api/filter_price_atr", methods=["GET", "POST"])
def filter_price_atr():
    symbol = request.args.get("symbol", "").strip().upper()
    modo = request.args.get("modo", "").strip().lower()
    print("MODO", modo)
    if not symbol:
        return jsonify({"erro": "Par√¢metro 'symbol' √© obrigat√≥rio"}), 400

    salve_or_replace(symbol)

    #  Recupera do banco (s√≥ pra confirmar ou usar daqui pra frente)
    symbol_primary = symbolo_saved()

    #  Busca os klines na Binance
    time = get_timeframe_global()
    try:
        if modo == "simulation":
            # üîÅ Limpa os dados antigos da tabela antes de salvar os novos
            clear_table_trend_clarifications()
            # üîÅ Pega os dados do banco
            dados_brutos = get_data_klines(symbol_primary, time)
            dados = formatar_dados_brutos(dados_brutos)
        else:
            clear_table_trend_clarifications()
            # üîÅ Pega os dados em tempo real da Binance
            dados_brutos = client.get_klines(
                symbol=symbol_primary, interval=time, limit=1500
            )
            dados = formatar_dados_brutos(dados_brutos)

    except Exception as e:
        print(f"‚ùå Erro Binance: {str(e)}")
        return jsonify({"erro": str(e)}), 500

    # Formata os dados e extrai pre√ßos de fechamento e tempos

    dados = formatar_dados_brutos(dados_brutos)
    closes = [item["Fechamento"] for item in dados]
    timestamps = [item["Tempo"] for item in dados]

    # Calcula o ATR suavizado
    atrs = calcular_atr_movel(dados, periodo=14)
    atr_suave = suavizar_atr(atrs, periodo=180)

    if not atr_suave:
        return jsonify({"erro": "ATR n√£o p√¥de ser calculado."}), 400

    verify_time_multiply = 4

    # Define os limites com base no ATR
    atr_ultima_suave = atr_suave[-1]["ATR_Suavizado"]
    atr_mult = atr_ultima_suave * verify_time_multiply

    # Aredonda os valores
    round_atr = round(atr_mult, 2)
    confir = round_atr / 2
    confir_round = round(confir, 2)

    limite = round_atr
    confirmar = confir_round

    # Inicializa vari√°veis de controle
    cont = 0
    movimentos = []
    estado = "inicio"
    topo = closes[0]
    fundo = closes[0]
    ponto_referencia = closes[0]
    ponto_inicial = closes[0]
    tendencia_atual = None
    ultimo_pivot_alta = None
    ultimo_pivot_baixa = None
    ultimo_pivot_reacao_sec_alta = None
    ultimo_pivot_reacao_sec_baixa = None
    ultimo_pivot_rally_alta = None
    ultimo_pivot_rally_baixa = None
    ultimo_pivot_rally_alta_temp = None
    ultimo_pivot_rally_baixa_temp = None
    ultimo_pivot_reacao_sec_alta_temp = None
    ultimo_pivot_reacao_sec_baixa_temp = None

    # Primeiro ponto √© sempre um Rally Natural Inicial
    movimentos.append(
        {
            "closeTime": timestamps[0],
            "closePrice": ponto_referencia,
            "tipo": "Rally Natural (inicial)",
        }
    )

    for i in range(1, len(closes)):
        preco = closes[i]
        tempo = timestamps[i]
        variacao = preco - ponto_referencia
        movimento_adicionado = False  # Controle para evitar duplica√ß√£o
        cont += 1

        # === ESTADO INICIAL ===
        # Detecta in√≠cio de tend√™ncia
        if estado == "inicio":
            if not movimento_adicionado and preco > ponto_referencia + limite:
                # Inicia tend√™ncia de alta
                estado = "tendencia_alta"
                tendencia_atual = "Alta"
                ultimo_pivot_alta = preco
                topo = preco
                ponto_referencia = preco
                movimentos.append(
                    {"closeTime": tempo, "closePrice": preco, "tipo": "Tend√™ncia Alta"}
                )
                movimento_adicionado = True

            elif not movimento_adicionado and preco < ponto_referencia - limite:
                # Inicia tend√™ncia de baixa
                estado = "tendencia_baixa"
                tendencia_atual = "Baixa"
                ultimo_pivot_baixa = preco
                fundo = preco
                ponto_referencia = preco
                movimentos.append(
                    {"closeTime": tempo, "closePrice": preco, "tipo": "Tend√™ncia Baixa"}
                )
                movimento_adicionado = True

        # === TEND√äNCIA DE ALTA ===
        elif not movimento_adicionado and estado == "tendencia_alta":
            if preco > topo:
                # Continua tend√™ncia de alta
                topo = preco
                ultimo_pivot_alta = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Tend√™ncia Alta (topo)",
                    }
                )
                movimento_adicionado = True
            elif not movimento_adicionado and preco < topo - limite:
                # Transi√ß√£o para rea√ß√£o natural (corre√ß√£o)
                estado = "reacao_natural"
                fundo = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Rea√ß√£o Natural (Alta)",
                    }
                )
                movimento_adicionado = True

        # === TEND√äNCIA DE BAIXA ===
        elif not movimento_adicionado and estado == "tendencia_baixa":
            if preco < fundo:
                # Continua tend√™ncia de baixa
                fundo = preco
                ultimo_pivot_baixa = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Tend√™ncia Baixa (fundo)",
                    }
                )
                movimento_adicionado = True
            elif not movimento_adicionado and preco > fundo + limite:
                # Transi√ß√£o para rea√ß√£o natural (corre√ß√£o)
                estado = "reacao_natural"
                topo = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Rea√ß√£o Natural (Baixa)",
                    }
                )
                movimento_adicionado = True

        # === REA√á√ÉO NATURAL ===
        elif estado == "reacao_natural":
            if tendencia_atual == "Alta":
                # Vindo de tend√™ncia de alta
                if not movimento_adicionado and preco < fundo:
                    # Continua√ß√£o da rea√ß√£o
                    fundo = preco
                    ultimo_pivot_rally_alta_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o Natural (fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_alta
                ):
                    # Rally Natural (recuperacao)
                    estado = "rally_natural"
                    topo = preco
                    ultimo_pivot_rally_alta = ultimo_pivot_rally_alta_temp
                    ultimo_pivot_rally_baixa = None
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Alta)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ponto_inicial is not None
                    and preco < ponto_inicial - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):

                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < ultimo_pivot_baixa - confirmar
                ):

                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # Vindo de tend√™ncia baixa
                if not movimento_adicionado and preco > topo:
                    # Continua√ß√£o da rea√ß√£o
                    topo = preco
                    ultimo_pivot_rally_baixa_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o Natural (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_baixa
                ):
                    # Rally Natural (respiro de baixa)
                    estado = "rally_natural"
                    fundo = preco
                    ultimo_pivot_rally_baixa = ultimo_pivot_rally_baixa_temp
                    ultimo_pivot_rally_alta = None
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < ultimo_pivot_baixa - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ponto_inicial is not None
                    and preco > ponto_inicial + confirmar
                ):
                    # Revers√£o para tend√™ncia de alta
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

        # === RALLY NATURAL ===
        elif estado == "rally_natural":
            if tendencia_atual == "Alta":
                # Vindo de tend√™ncia alta
                if (
                    not movimento_adicionado
                    and preco > topo
                    and preco < ultimo_pivot_alta
                ):
                    # Continua√ß√£o do rally
                    topo = preco
                    ultimo_pivot_reacao_sec_alta_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    # Retomada da tend√™ncia de alta
                    estado = "tendencia_alta"
                    ultimo_pivot_alta = preco
                    tendencia_atual = "Alta"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                    print(f"pivo rally", {ultimo_pivot_rally_alta})
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_rally_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ultimo_pivot_reacao_sec_alta = ultimo_pivot_reacao_sec_alta_temp
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Alta)",
                        }
                    )
                    movimento_adicionado = True
            elif tendencia_atual == "Baixa":
                # Vindo de tend√™ncia baixa
                if (
                    not movimento_adicionado
                    and preco < fundo
                    and preco > ultimo_pivot_baixa
                ):
                    # Continua√ß√£o do rally
                    fundo = preco
                    ponto_referencia = preco
                    ultimo_pivot_reacao_sec_baixa_temp = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado and preco < ultimo_pivot_baixa - confirmar
                ):
                    # Retomada da tend√™ncia de baixa
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    # Revers√£o para tend√™ncia de alta
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_rally_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ultimo_pivot_reacao_sec_baixa = ultimo_pivot_reacao_sec_baixa_temp
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Baixa)",
                        }
                    )
                    movimento_adicionado = True

        # ======== Rea√ß√£o secund√°ria ===========
        elif estado == "reacao_secundaria":
            if tendencia_atual == "Alta":
                if not movimento_adicionado and preco < fundo:
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Fundo)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_reacao_sec_alta
                ):
                    # rally secund√°rio
                    estado = "rally_secundario"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°rio (Alta)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > fundo + limite
                    and preco > ultimo_pivot_reacao_sec_alta
                    and preco < ultimo_pivot_alta
                ):
                    #  volta ao rally
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retorno)",
                        }
                    )
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # vindo de tend√™ncia de baixa
                if not movimento_adicionado and preco > topo:
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_reacao_sec_baixa
                ):
                    #  volta ao rally
                    estado = "rally_secundario"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°rio (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco < ultimo_pivot_reacao_sec_baixa
                    and preco > ultimo_pivot_baixa
                ):
                    #  volta ao rally
                    estado = "rally_natural"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and ultimo_pivot_baixa
                    and preco < ultimo_pivot_baixa - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            # ======== Rea√ß√£o secund√°ria ===========
        elif estado == "rally_secundario":
            if tendencia_atual == "Alta":
                if not movimento_adicionado and preco > topo:
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°ria (Topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_reacao_sec_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Alta)",
                        }
                    )
                    movimento_adicionado = True
                    # retorno do rally secundario para reacao
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > ultimo_pivot_reacao_sec_alta + confirmar
                    and preco < ultimo_pivot_alta
                ):
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_rally_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # vindo de tend√™ncia de baixa
                if not movimento_adicionado and preco < fundo:
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°ria (Fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_reacao_sec_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Baixa)",
                        }
                    )
                    movimento_adicionado = True
                    # retorno do rally secundario para reacao
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < ultimo_pivot_reacao_sec_baixa - confirmar
                    and preco > ultimo_pivot_baixa
                ):
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > ultimo_pivot_baixa
                    and preco < ultimo_pivot_reacao_sec_baixa - confirmar
                ):
                    # volta Rally natural
                    estado = "rally_natural"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_rally_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

    # Cria lista de tuplas para bulk insert
    movimentos_para_salvar = []

    for p in movimentos:
        date = p["closeTime"]
        price = p["closePrice"]
        type = p["tipo"]

        movimentos_para_salvar.append((date, price, type))

    # Salva todos os dados de uma vez
    save_trend_clarifications(movimentos_para_salvar)

    return jsonify(movimentos)


# -----------------------------------------------------
# 2Ô∏è‚É£ Endpoint para pegar dados secund√°rios da binance.
# -----------------------------------------------------
@app.route("/api/filter_price_atr_second", methods=["GET", "POST"])
def filter_price_atr_second():
    symbol = request.args.get("symbol").strip().upper()
    modo = request.args.get("modo", "").strip().lower()

    if not symbol:
        return jsonify({"erro": "Par√¢metro 'symbol' √© obrigat√≥rio"}), 400

    # Apaga o que tinha e salva s√≥ o novo
    salve_or_replace_sec(symbol)

    # Recupera do banco (s√≥ pra confirmar ou usar daqui pra frente)
    symbol_second = symbolo_saved_sec()

    # Busca os klines na Binance
    klines = get_timeframe_global()

    if not klines:
        return (
            jsonify({"erro": "Intervalo de tempo n√£o encontrado no banco de dados"}),
            500,
        )

    try:
        if modo == "simulation":
            # üîÅ Limpa os dados antigos da tabela antes de salvar os novos
            clear_table_trend_clarifications_sec()
            # üîÅ Pega os dados do banco
            dados_brutos = get_data_klines_sec(symbol_second, klines)
            dados = formatar_dados_brutos(dados_brutos)

        else:
            clear_table_trend_clarifications_sec()
            # üîÅ Pega os dados em tempo real da Binance
            dados_brutos = client.get_klines(
                symbol=symbol_second, interval=klines, limit=1500
            )

    except Exception as e:
        print(f"‚ùå Erro Binance: {str(e)}")
        return jsonify({"erro": str(e)}), 500

    # Formata os dados e extrai pre√ßos de fechamento e temposs
    dados = formatar_dados_brutos(dados_brutos)
    closes = [item["Fechamento"] for item in dados]
    timestamps = [item["Tempo"] for item in dados]

    # Calcula o ATR suavizado
    atrs = calcular_atr_movel(dados, periodo=14)
    atr_suave = suavizar_atr(atrs, periodo=180)

    if not atr_suave:
        return jsonify({"erro": "ATR n√£o p√¥de ser calculado."}), 400

    if klines == "15m":
        verify_time_multiply = 5
    else:
        verify_time_multiply = 4

    # Define os limites com base no ATR
    atr_ultima_suave = atr_suave[-1]["ATR_Suavizado"]
    atr_mult = atr_ultima_suave * verify_time_multiply

    # Aredonda os valores
    round_atr = round(atr_mult, 2)
    confir = round_atr / 2
    confir_round = round(confir, 2)

    limite = round_atr
    confirmar = confir_round

    # Inicializa vari√°veis de controle
    cont = 0
    movimentos = []
    estado = "inicio"
    topo = closes[0]
    fundo = closes[0]
    ponto_referencia = closes[0]
    ponto_inicial = closes[0]
    tendencia_atual = None
    ultimo_pivot_alta = None
    ultimo_pivot_baixa = None
    ultimo_pivot_reacao_sec_alta = None
    ultimo_pivot_reacao_sec_baixa = None
    ultimo_pivot_rally_alta = None
    ultimo_pivot_rally_baixa = None
    ultimo_pivot_rally_alta_temp = None
    ultimo_pivot_rally_baixa_temp = None
    ultimo_pivot_reacao_sec_alta_temp = None
    ultimo_pivot_reacao_sec_baixa_temp = None

    # Primeiro ponto √© sempre um Rally Natural Inicial
    movimentos.append(
        {
            "closeTime": timestamps[0],
            "closePrice": ponto_referencia,
            "tipo": "Rally Natural (inicial)",
        }
    )

    for i in range(1, len(closes)):
        preco = closes[i]
        tempo = timestamps[i]
        variacao = preco - ponto_referencia
        movimento_adicionado = False  # Controle para evitar duplica√ß√£o
        cont += 1

        # === ESTADO INICIAL ===
        # Detecta in√≠cio de tend√™ncia
        if estado == "inicio":
            if not movimento_adicionado and preco > ponto_referencia + limite:
                # Inicia tend√™ncia de alta
                estado = "tendencia_alta"
                tendencia_atual = "Alta"
                ultimo_pivot_alta = preco
                topo = preco
                ponto_referencia = preco
                movimentos.append(
                    {"closeTime": tempo, "closePrice": preco, "tipo": "Tend√™ncia Alta"}
                )
                movimento_adicionado = True

            elif not movimento_adicionado and preco < ponto_referencia - limite:
                # Inicia tend√™ncia de baixa
                estado = "tendencia_baixa"
                tendencia_atual = "Baixa"
                ultimo_pivot_baixa = preco
                fundo = preco
                ponto_referencia = preco
                movimentos.append(
                    {"closeTime": tempo, "closePrice": preco, "tipo": "Tend√™ncia Baixa"}
                )
                movimento_adicionado = True

        # === TEND√äNCIA DE ALTA ===
        elif not movimento_adicionado and estado == "tendencia_alta":
            if preco > topo:
                # Continua tend√™ncia de alta
                topo = preco
                ultimo_pivot_alta = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Tend√™ncia Alta (topo)",
                    }
                )
                movimento_adicionado = True
            elif not movimento_adicionado and preco < topo - limite:
                # Transi√ß√£o para rea√ß√£o natural (corre√ß√£o)
                estado = "reacao_natural"
                fundo = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Rea√ß√£o Natural (Alta)",
                    }
                )
                movimento_adicionado = True

        # === TEND√äNCIA DE BAIXA ===
        elif not movimento_adicionado and estado == "tendencia_baixa":
            if preco < fundo:
                # Continua tend√™ncia de baixa
                fundo = preco
                ultimo_pivot_baixa = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Tend√™ncia Baixa (fundo)",
                    }
                )
                movimento_adicionado = True
            elif not movimento_adicionado and preco > fundo + limite:
                # Transi√ß√£o para rea√ß√£o natural (corre√ß√£o)
                estado = "reacao_natural"
                topo = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Rea√ß√£o Natural (Baixa)",
                    }
                )
                movimento_adicionado = True

        # === REA√á√ÉO NATURAL ===
        elif estado == "reacao_natural":
            if tendencia_atual == "Alta":
                # Vindo de tend√™ncia de alta
                if not movimento_adicionado and preco < fundo:
                    # Continua√ß√£o da rea√ß√£o
                    fundo = preco
                    ultimo_pivot_rally_alta_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o Natural (fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_alta
                ):
                    # Rally Natural (recuperacao)
                    estado = "rally_natural"
                    topo = preco
                    ultimo_pivot_rally_alta = ultimo_pivot_rally_alta_temp
                    ultimo_pivot_rally_baixa = None
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Alta)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ponto_inicial is not None
                    and preco < ponto_inicial - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):

                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < ultimo_pivot_baixa - confirmar
                ):

                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # Vindo de tend√™ncia baixa
                if not movimento_adicionado and preco > topo:
                    # Continua√ß√£o da rea√ß√£o
                    topo = preco
                    ultimo_pivot_rally_baixa_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o Natural (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_baixa
                ):
                    # Rally Natural (respiro de baixa)
                    estado = "rally_natural"
                    fundo = preco
                    ultimo_pivot_rally_baixa = ultimo_pivot_rally_baixa_temp
                    ultimo_pivot_rally_alta = None
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < ultimo_pivot_baixa - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ponto_inicial is not None
                    and preco > ponto_inicial + confirmar
                ):
                    # Revers√£o para tend√™ncia de alta
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

        # === RALLY NATURAL ===
        elif estado == "rally_natural":
            if tendencia_atual == "Alta":
                # Vindo de tend√™ncia alta
                if (
                    not movimento_adicionado
                    and preco > topo
                    and preco < ultimo_pivot_alta
                ):
                    # Continua√ß√£o do rally
                    topo = preco
                    ultimo_pivot_reacao_sec_alta_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    # Retomada da tend√™ncia de alta
                    estado = "tendencia_alta"
                    ultimo_pivot_alta = preco
                    tendencia_atual = "Alta"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                    print(f"pivo rally", {ultimo_pivot_rally_alta})
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_rally_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ultimo_pivot_reacao_sec_alta = ultimo_pivot_reacao_sec_alta_temp
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Alta)",
                        }
                    )
                    movimento_adicionado = True
            elif tendencia_atual == "Baixa":
                # Vindo de tend√™ncia baixa
                if (
                    not movimento_adicionado
                    and preco < fundo
                    and preco > ultimo_pivot_baixa
                ):
                    # Continua√ß√£o do rally
                    fundo = preco
                    ponto_referencia = preco
                    ultimo_pivot_reacao_sec_baixa_temp = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado and preco < ultimo_pivot_baixa - confirmar
                ):
                    # Retomada da tend√™ncia de baixa
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    # Revers√£o para tend√™ncia de alta
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_rally_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ultimo_pivot_reacao_sec_baixa = ultimo_pivot_reacao_sec_baixa_temp
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Baixa)",
                        }
                    )
                    movimento_adicionado = True

        # ======== Rea√ß√£o secund√°ria ===========
        elif estado == "reacao_secundaria":
            if tendencia_atual == "Alta":
                if not movimento_adicionado and preco < fundo:
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Fundo)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_reacao_sec_alta
                ):
                    # rally secund√°rio
                    estado = "rally_secundario"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°rio (Alta)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > fundo + limite
                    and preco > ultimo_pivot_reacao_sec_alta
                    and preco < ultimo_pivot_alta
                ):
                    #  volta ao rally
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retorno)",
                        }
                    )
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # vindo de tend√™ncia de baixa
                if not movimento_adicionado and preco > topo:
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_reacao_sec_baixa
                ):
                    #  volta ao rally
                    estado = "rally_secundario"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°rio (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco < ultimo_pivot_reacao_sec_baixa
                    and preco > ultimo_pivot_baixa
                ):
                    #  volta ao rally
                    estado = "rally_natural"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and ultimo_pivot_baixa
                    and preco < ultimo_pivot_baixa - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            # ======== Rea√ß√£o secund√°ria ===========
        elif estado == "rally_secundario":
            if tendencia_atual == "Alta":
                if not movimento_adicionado and preco > topo:
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°ria (Topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_reacao_sec_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Alta)",
                        }
                    )
                    movimento_adicionado = True
                    # retorno do rally secundario para reacao
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > ultimo_pivot_reacao_sec_alta + confirmar
                    and preco < ultimo_pivot_alta
                ):
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_rally_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # vindo de tend√™ncia de baixa
                if not movimento_adicionado and preco < fundo:
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°ria (Fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_reacao_sec_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Baixa)",
                        }
                    )
                    movimento_adicionado = True
                    # retorno do rally secundario para reacao
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < ultimo_pivot_reacao_sec_baixa - confirmar
                    and preco > ultimo_pivot_baixa
                ):
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > ultimo_pivot_baixa
                    and preco < ultimo_pivot_reacao_sec_baixa - confirmar
                ):
                    # volta Rally natural
                    estado = "rally_natural"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_rally_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

    # Cria lista de tuplas para bulk insert
    movimentos_para_salvar = []

    for p in movimentos:
        date = p["closeTime"]
        price = p["closePrice"]
        type = p["tipo"]

        # logger.info(
        #    f"Hora: {p['closeTime']} | Pre√ßo: {p['closePrice']} | Tipo: {p['tipo']}"
        # )

        movimentos_para_salvar.append((date, price, type))

    # Salva todos os dados de uma vez
    save_trend_clarifications_sec(movimentos_para_salvar)

    return jsonify(movimentos)


# ------------------------------------------------
# 2Ô∏è‚É£ Endpoint para pegar dados chaves da binance.
# ------------------------------------------------
@app.route("/api/filter_price_key", methods=["GET", "POST"])
def filter_price_key():
    modo = request.args.get("modo", "").strip().lower()
    symbol_primary = request.args.get("symbol") or symbolo_saved()
    symbol_second = request.args.get("symbol_sec") or symbolo_saved_sec()
    if not symbol_primary or not symbol_second:
        return jsonify({"erro": "S√≠mbolos prim√°rio ou secund√°rio n√£o encontrados"}), 400

    time_frame = get_timeframe_global()

    if not time_frame:
        return (
            jsonify({"erro": "Intervalo de tempo n√£o encontrado no banco de dados"}),
            500,
        )

    try:
        if modo == "simulation":
            # üîÅ Pega os dados do banco
            dados_pri_bruto = get_data_klines(symbol_primary, time_frame)
            dados_pri = formatar_dados_brutos(dados_pri_bruto)

            dados_sec_bruto = get_data_klines_sec(symbol_second, time_frame)
            dados_sec = formatar_dados_brutos(dados_sec_bruto)
        else:
            dados_pri_bruto = client.get_klines(
                symbol=symbol_primary,
                interval=time_frame,
                limit=1500,
            )
            dados_sec_bruto = client.get_klines(
                symbol=symbol_second,
                interval=time_frame,
                limit=1500,
            )
    except Exception as e:
        return jsonify({"erro": f"Falha ao obter dados da Binance: {str(e)}"}), 500

    # Formata os dados para extrair valores num√©ricos
    dados_pri = formatar_dados_brutos(dados_pri_bruto)
    dados_sec = formatar_dados_brutos(dados_sec_bruto)

    qtd_candles = min(len(dados_pri), len(dados_sec))
    movimentos = []

    fechamento_pri = dados_pri[0]["Fechamento"]
    fechamento_sec = dados_sec[0]["Fechamento"]

    # Garantir que nenhum dos valores seja zero
    if fechamento_pri == 0 or fechamento_sec == 0:
        raise ValueError("Fechamento inv√°lido: zero encontrado.")

    # Calcula a propor√ß√£o padronizada
    pd = max(fechamento_pri, fechamento_sec) / min(fechamento_pri, fechamento_sec)

    for i in range(qtd_candles):
        timestamp = dados_pri[i]["Tempo"]
        fechamento_a = dados_pri[i]["Fechamento"]
        fechamento_b = dados_sec[i]["Fechamento"]

        max_fech = max(fechamento_a, fechamento_b)
        min_fech = min(fechamento_a, fechamento_b)

        # Garante que nenhum √© zero
        if min_fech == 0:
            continue
        pd = max_fech / min_fech
        # Ajusta somente o valor maior
        if fechamento_a > fechamento_b:
            fechamento_a_ajustado = fechamento_a / pd
            fechamento_b_ajustado = fechamento_b
        else:
            fechamento_a_ajustado = fechamento_a
            fechamento_b_ajustado = fechamento_b / pd

        soma = fechamento_a_ajustado + fechamento_b_ajustado

        movimentos.append(
            {
                "closeTime": timestamp,
                "closePrice": soma,
                "tipo": "Soma",
                "Tempo": timestamp,
                "Maximo": (
                    dados_pri[i]["Maximo"] / pd + dados_sec[i]["Maximo"]
                    if fechamento_a > fechamento_b
                    else dados_pri[i]["Maximo"] + dados_sec[i]["Maximo"] / pd
                ),
                "Minimo": (
                    dados_pri[i]["Minimo"] / pd + dados_sec[i]["Minimo"]
                    if fechamento_a > fechamento_b
                    else dados_pri[i]["Minimo"] + dados_sec[i]["Minimo"] / pd
                ),
                "Fechamento": soma,
            }
        )
    dados = movimentos
    closes = [item["closePrice"] for item in dados]
    timestamps = [item["closeTime"] for item in dados]

    # Calcula o ATR suavizado
    atrs = calcular_atr_movel(dados, periodo=14)
    atr_suave = suavizar_atr(atrs, periodo=180)

    if not atr_suave:
        return jsonify({"erro": "ATR n√£o p√¥de ser calculado."}), 400

    if time_frame == "15m":
        verify_time_multiply = 5
    else:
        verify_time_multiply = 4

    # Define os limites com base no ATR
    atr_ultima_suave = atr_suave[-1]["ATR_Suavizado"]
    atr_mult = atr_ultima_suave * verify_time_multiply

    # Aredonda os valores
    round_atr = round(atr_mult, 2)
    confir = round_atr / 2
    confir_round = round(confir, 2)

    limite = round_atr
    confirmar = confir_round

    # === Inicializa√ß√£o dos estados ===
    movimentos = []
    estado = "inicio"
    topo = fundo = ponto_referencia = closes[0]
    tendencia_atual = None

    movimentos.append(
        {
            "closeTime": timestamps[0],
            "closePrice": ponto_referencia,
            "tipo": "Rally Natural (inicial)",
        }
    )

    # Inicializa vari√°veis de controle
    cont = 0
    movimentos = []
    estado = "inicio"
    topo = closes[0]
    fundo = closes[0]
    ponto_referencia = closes[0]
    ponto_inicial = closes[0]
    tendencia_atual = None
    ultimo_pivot_alta = None
    ultimo_pivot_baixa = None
    ultimo_pivot_reacao_sec_alta = None
    ultimo_pivot_reacao_sec_baixa = None
    ultimo_pivot_rally_alta = None
    ultimo_pivot_rally_baixa = None
    ultimo_pivot_rally_alta_temp = None
    ultimo_pivot_rally_baixa_temp = None
    ultimo_pivot_reacao_sec_alta_temp = None
    ultimo_pivot_reacao_sec_baixa_temp = None

    # Primeiro ponto √© sempre um Rally Natural Inicial
    movimentos.append(
        {
            "closeTime": timestamps[0],
            "closePrice": ponto_referencia,
            "tipo": "Rally Natural (inicial)",
        }
    )

    for i in range(1, len(closes)):
        preco = closes[i]
        tempo = timestamps[i]
        variacao = preco - ponto_referencia
        movimento_adicionado = False  # Controle para evitar duplica√ß√£o
        cont += 1

        # === ESTADO INICIAL ===
        # Detecta in√≠cio de tend√™ncia
        if estado == "inicio":
            if not movimento_adicionado and preco > ponto_referencia + limite:
                # Inicia tend√™ncia de alta
                estado = "tendencia_alta"
                tendencia_atual = "Alta"
                ultimo_pivot_alta = preco
                topo = preco
                ponto_referencia = preco
                movimentos.append(
                    {"closeTime": tempo, "closePrice": preco, "tipo": "Tend√™ncia Alta"}
                )
                movimento_adicionado = True

            elif not movimento_adicionado and preco < ponto_referencia - limite:
                # Inicia tend√™ncia de baixa
                estado = "tendencia_baixa"
                tendencia_atual = "Baixa"
                ultimo_pivot_baixa = preco
                fundo = preco
                ponto_referencia = preco
                movimentos.append(
                    {"closeTime": tempo, "closePrice": preco, "tipo": "Tend√™ncia Baixa"}
                )
                movimento_adicionado = True

        # === TEND√äNCIA DE ALTA ===
        elif not movimento_adicionado and estado == "tendencia_alta":
            if preco > topo:
                # Continua tend√™ncia de alta
                topo = preco
                ultimo_pivot_alta = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Tend√™ncia Alta (topo)",
                    }
                )
                movimento_adicionado = True
            elif not movimento_adicionado and preco < topo - limite:
                # Transi√ß√£o para rea√ß√£o natural (corre√ß√£o)
                estado = "reacao_natural"
                fundo = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Rea√ß√£o Natural (Alta)",
                    }
                )
                movimento_adicionado = True

        # === TEND√äNCIA DE BAIXA ===
        elif not movimento_adicionado and estado == "tendencia_baixa":
            if preco < fundo:
                # Continua tend√™ncia de baixa
                fundo = preco
                ultimo_pivot_baixa = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Tend√™ncia Baixa (fundo)",
                    }
                )
                movimento_adicionado = True
            elif not movimento_adicionado and preco > fundo + limite:
                # Transi√ß√£o para rea√ß√£o natural (corre√ß√£o)
                estado = "reacao_natural"
                topo = preco
                ponto_referencia = preco
                movimentos.append(
                    {
                        "closeTime": tempo,
                        "closePrice": preco,
                        "tipo": "Rea√ß√£o Natural (Baixa)",
                    }
                )
                movimento_adicionado = True

        # === REA√á√ÉO NATURAL ===
        elif estado == "reacao_natural":
            if tendencia_atual == "Alta":
                # Vindo de tend√™ncia de alta
                if not movimento_adicionado and preco < fundo:
                    # Continua√ß√£o da rea√ß√£o
                    fundo = preco
                    ultimo_pivot_rally_alta_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o Natural (fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_alta
                ):
                    # Rally Natural (recuperacao)
                    estado = "rally_natural"
                    topo = preco
                    ultimo_pivot_rally_alta = ultimo_pivot_rally_alta_temp
                    ultimo_pivot_rally_baixa = None
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Alta)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ponto_inicial is not None
                    and preco < ponto_inicial - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):

                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < ultimo_pivot_baixa - confirmar
                ):

                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # Vindo de tend√™ncia baixa
                if not movimento_adicionado and preco > topo:
                    # Continua√ß√£o da rea√ß√£o
                    topo = preco
                    ultimo_pivot_rally_baixa_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o Natural (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_baixa
                ):
                    # Rally Natural (respiro de baixa)
                    estado = "rally_natural"
                    fundo = preco
                    ultimo_pivot_rally_baixa = ultimo_pivot_rally_baixa_temp
                    ultimo_pivot_rally_alta = None
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and preco < ultimo_pivot_baixa - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ponto_inicial is not None
                    and preco > ponto_inicial + confirmar
                ):
                    # Revers√£o para tend√™ncia de alta
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_inicial = None
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

        # === RALLY NATURAL ===
        elif estado == "rally_natural":
            if tendencia_atual == "Alta":
                # Vindo de tend√™ncia alta
                if (
                    not movimento_adicionado
                    and preco > topo
                    and preco < ultimo_pivot_alta
                ):
                    # Continua√ß√£o do rally
                    topo = preco
                    ultimo_pivot_reacao_sec_alta_temp = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    # Retomada da tend√™ncia de alta
                    estado = "tendencia_alta"
                    ultimo_pivot_alta = preco
                    tendencia_atual = "Alta"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    # Revers√£o para tend√™ncia de baixa
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                    print(f"pivo rally", {ultimo_pivot_rally_alta})
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_rally_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ultimo_pivot_reacao_sec_alta = ultimo_pivot_reacao_sec_alta_temp
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Alta)",
                        }
                    )
                    movimento_adicionado = True
            elif tendencia_atual == "Baixa":
                # Vindo de tend√™ncia baixa
                if (
                    not movimento_adicionado
                    and preco < fundo
                    and preco > ultimo_pivot_baixa
                ):
                    # Continua√ß√£o do rally
                    fundo = preco
                    ponto_referencia = preco
                    ultimo_pivot_reacao_sec_baixa_temp = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado and preco < ultimo_pivot_baixa - confirmar
                ):
                    # Retomada da tend√™ncia de baixa
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    # Revers√£o para tend√™ncia de alta
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_rally_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ultimo_pivot_reacao_sec_baixa = ultimo_pivot_reacao_sec_baixa_temp
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Baixa)",
                        }
                    )
                    movimento_adicionado = True

        # ======== Rea√ß√£o secund√°ria ===========
        elif estado == "reacao_secundaria":
            if tendencia_atual == "Alta":
                if not movimento_adicionado and preco < fundo:
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Fundo)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_reacao_sec_alta
                ):
                    # rally secund√°rio
                    estado = "rally_secundario"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°rio (Alta)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > fundo + limite
                    and preco > ultimo_pivot_reacao_sec_alta
                    and preco < ultimo_pivot_alta
                ):
                    #  volta ao rally
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retorno)",
                        }
                    )
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # vindo de tend√™ncia de baixa
                if not movimento_adicionado and preco > topo:
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_reacao_sec_baixa
                ):
                    #  volta ao rally
                    estado = "rally_secundario"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°rio (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco < ultimo_pivot_reacao_sec_baixa
                    and preco > ultimo_pivot_baixa
                ):
                    #  volta ao rally
                    estado = "rally_natural"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_baixa is not None
                    and ultimo_pivot_baixa
                    and preco < ultimo_pivot_baixa - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    ultimo_pivot_baixa = preco
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (retomada)",
                        }
                    )
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            # ======== Rea√ß√£o secund√°ria ===========
        elif estado == "rally_secundario":
            if tendencia_atual == "Alta":
                if not movimento_adicionado and preco > topo:
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°ria (Topo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_reacao_sec_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Alta)",
                        }
                    )
                    movimento_adicionado = True
                    # retorno do rally secundario para reacao
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_alta is not None
                    and preco > ultimo_pivot_reacao_sec_alta + confirmar
                    and preco < ultimo_pivot_alta
                ):
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_alta is not None
                    and preco > ultimo_pivot_alta + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    ultimo_pivot_alta = preco
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < topo - limite
                    and preco > ultimo_pivot_rally_alta
                ):
                    estado = "reacao_secundaria"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_alta is not None
                    and preco < ultimo_pivot_rally_alta - confirmar
                ):
                    estado = "tendencia_baixa"
                    tendencia_atual = "Baixa"
                    fundo = preco
                    ultimo_pivot_baixa = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Baixa (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

            elif tendencia_atual == "Baixa":
                # vindo de tend√™ncia de baixa
                if not movimento_adicionado and preco < fundo:
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally secund√°ria (Fundo)",
                        }
                    )
                    movimento_adicionado = True
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_reacao_sec_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (Baixa)",
                        }
                    )
                    movimento_adicionado = True
                    # retorno do rally secundario para reacao
                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco < ultimo_pivot_reacao_sec_baixa - confirmar
                    and preco > ultimo_pivot_baixa
                ):
                    estado = "rally_natural"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (retorno)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > ultimo_pivot_baixa
                    and preco < ultimo_pivot_reacao_sec_baixa - confirmar
                ):
                    # volta Rally natural
                    estado = "rally_natural"
                    fundo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rally Natural (Baixa)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_reacao_sec_baixa is not None
                    and preco > fundo + limite
                    and preco < ultimo_pivot_rally_baixa
                ):
                    estado = "reacao_secundaria"
                    topo = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Rea√ß√£o secund√°ria (retomada)",
                        }
                    )
                    movimento_adicionado = True

                elif (
                    not movimento_adicionado
                    and ultimo_pivot_rally_baixa is not None
                    and preco > ultimo_pivot_rally_baixa + confirmar
                ):
                    estado = "tendencia_alta"
                    tendencia_atual = "Alta"
                    topo = preco
                    ultimo_pivot_alta = preco
                    ponto_referencia = preco
                    movimentos.append(
                        {
                            "closeTime": tempo,
                            "closePrice": preco,
                            "tipo": "Tend√™ncia Alta (revers√£o)",
                        }
                    )
                    movimento_adicionado = True

    logger.info("\n=== MOVIMENTOS CLASSIFICADOS ===")
    # Cria lista de tuplas para bulk insert
    movimentos_para_salvar = []

    for p in movimentos:
        date = p["closeTime"]
        price = p["closePrice"]
        type = p["tipo"]

        movimentos_para_salvar.append((date, price, type))
    logger.info("=================================\n")
    # Salva todos os dados de uma vez
    save_trend_clarifications_key(movimentos_para_salvar)

    return jsonify(movimentos)


# ==========================================================================
#                          Fim da classifica√ß√£o
# ==========================================================================


# -----------------------------------------------
# Fun√ß√£o para retornar os pontos importantes.
# -----------------------------------------------
@app.route("/api/trend_clarifications", methods=["GET"])
def pivot_points():
    if request.method == "GET":
        points = important_points()
        return jsonify(points)


# --------------------------------------------------
# Fun√ß√£o para retornar os pontos importantes chaves.
# --------------------------------------------------
@app.route("/api/trend_clarifications_key", methods=["GET"])
def pivot_points_key():
    if request.method == "GET":
        points = important_points_key()
        return jsonify(points)


@app.route("/")
def home():
    return "API ATR est√° rodando com sucesso!"
